from nipype_walker import main_walker

indent = "    "
newline = "\n"
output = "../model/py/"


def get_class(pkg: str, json):
    source = '"""' + newline
    source += "Autogenerated from NiPype" + newline
    source += '"""' + newline * 3
    source += "class " + pkg + ":" + newline
    source += indent + "class Preprocessing:" + newline

    for function in json[pkg + "_Preprocessing"]:
        source += indent * 2 + "class " + function + ":" + newline
        source += indent * 3 + "class Input:" + newline
        for input in json[pkg + "_Preprocessing"][function]['features']['input']:
            source += indent * 4 + input + " = '" + input + "'" + newline
        source += indent * 3 + newline
        if 'output' in json[pkg + "_Preprocessing"][function]['features']:
            source += indent * 3 + "class Output:" + newline
            for output in json[pkg + "_Preprocessing"][function]['features']['output']:
                source += indent * 4 + output + " = '" + output + "'" + newline
            source += indent * 3 + newline

    for function in json[pkg + "_Analysis"]:
        source += indent * 2 + "class " + function + ":" + newline
        source += indent * 3 + "class Input:" + newline
        for input in json[pkg + "_Analysis"][function]['features']['input']:
            source += indent * 4 + input + " = '" + input + "'" + newline
        source += indent * 3 + newline
        if 'output' in json[pkg + "_Analysis"][function]['features']:
            source += indent * 3 + "class Output:" + newline
            for output in json[pkg + "_Analysis"][function]['features']['output']:
                source += indent * 4 + output + " = '" + output + "'" + newline
            source += indent * 3 + newline
    return source


if __name__ == '__main__':
    json = main_walker.walk()
    source = get_class('AFNI', json)
    source += get_class('FSL', json)
    source += get_class('SPM', json)
    print(source)
    f = open(output + 'constants.py', "w")
    f.write(source)
    f.close()
